# Environment Configuration Template
# Copy this file to .env.local for local development
# Replace all placeholder values with your actual credentials
# DO NOT commit actual secrets to version control

# ========================================
# APPLICATION CONFIGURATION
# ========================================

# Application URLs - Update these for your environment
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_APP_DOMAIN=localhost:3000

# Environment - development | production | test
NODE_ENV=development

# ========================================
# CONVEX DATABASE CONFIGURATION
# ========================================

# Get these from your Convex dashboard at https://dashboard.convex.dev
# For development: Use your dev deployment
# For production: Use your prod deployment
CONVEX_DEPLOYMENT=your_deployment_here
NEXT_PUBLIC_CONVEX_URL=https://your-deployment.convex.cloud

# ========================================
# CLERK AUTHENTICATION CONFIGURATION
# ========================================

# Get these from your Clerk dashboard at https://dashboard.clerk.com
# For development: Use your development instance keys
# For production: Use your production instance keys
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_your_publishable_key_here
CLERK_SECRET_KEY=sk_test_your_secret_key_here
CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Clerk Frontend API URL
# This comes from your JWT template in Clerk dashboard
# Create a template named "convex" for proper integration
NEXT_PUBLIC_CLERK_FRONTEND_API_URL=https://your-clerk-instance.clerk.accounts.dev

# Clerk Redirect URLs
# These ensure users are redirected to dashboard after authentication
NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=/dashboard
NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=/dashboard

# ========================================
# DATABASE CONFIGURATION
# ========================================

# For local development: SQLite (recommended)
DATABASE_URL="file:./prisma/dev.db"

# For production: Use PostgreSQL or your preferred database
# DATABASE_URL="postgresql://username:password@host:port/database"

# ========================================
# AI SERVICES CONFIGURATION
# ========================================

# OpenAI API Key - Get from https://platform.openai.com/api-keys
OPENAI_API_KEY="your-openai-api-key-here"

# ========================================
# API CONFIGURATION
# ========================================

# API Base URL - Should match your application URL
NEXT_PUBLIC_API_URL=http://localhost:3000

# ========================================
# DEVELOPMENT-SPECIFIC CONFIGURATION
# ========================================

# Enable debug mode for development
NEXT_PUBLIC_DEBUG_MODE=true

# ========================================
# OPTIONAL: TESTING CONFIGURATION
# ========================================

# Uncomment these for testing with auth bypass
# SKIP_AUTH=true
# NEXT_PUBLIC_SKIP_AUTH=true
# NEXT_PUBLIC_USE_MOCK_DATA=true
# NEXT_PUBLIC_MOCK_USER_ID=test-user-123
# NEXT_PUBLIC_MOCK_USER_EMAIL=test@your-domain.dev

# ========================================
# OPTIONAL: PRODUCTION CONFIGURATIONS
# ========================================

# Analytics - Uncomment and configure for production
# NEXT_PUBLIC_ANALYTICS_ID=your_analytics_id_here

# Additional production settings
# ANALYZE=false

# ========================================
# SECURITY NOTES
# ========================================

# 1. Never commit real API keys or secrets to version control
# 2. Use different Clerk instances for development and production
# 3. Set up proper webhook endpoints for production
# 4. Configure proper database backups for production
# 5. Use environment-specific domains and URLs

# ========================================
# PARKINGLOT PATTERNS IMPLEMENTED
# ========================================

# This configuration follows proven patterns from ParkingLot:
# - Comprehensive auth system with role-based permissions
# - Modular environment configuration
# - Development/Production separation
# - Secure credential management
# - Workflow automation support

# For more information about ParkingLot patterns, see:
# - convex/schema.ts (workflow automation)
# - src/lib/auth-utils.ts (comprehensive auth system)
